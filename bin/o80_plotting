#!/usr/bin/env python

import sys
import os
import time
import threading
import multiprocessing
import o80
import o80_pam
import pam_interface
from fyplot import dict_plot
from lightargs import Brightargs,Set,Range,Positive



# creates 5 dynamic plots: 1 per dof (observed/desired pressure
# for agonist and antagonist muscles + position) + frequency
# uses fyplot (pip3 install fyplot)
def _plot(config):

    plot_config = dict_plot.Config()

    # 1 subplot per dof
    plot_config.channels = [str(dof)
                            for dof in range(config.nb_dofs)]
    # 1 subplot for frequency
    plot_config.channels.append("frequency")

    # for the dof plots: y limit of pressures between
    # 0 and 30000
    lim_min = 0
    lim_max = 30000
    plot_config.limits = {str(dof):(lim_min,lim_max)
                     for dof in range(nb_dofs)}

    # for frequency: y limits in Hz up to 2x
    # the expected frequency
    plot_config.limits["frequency"]=(0,maximal_frequency)

    # each dof subplot will displays these pressures + position:
    # (position, in radian, will be cast to (min_pressure,max_pressure)
    # to fit in the y limits
    for dof in range(nb_dofs):
        plot_config.slots[str(dof)] = ["desired_ago","observed_ago",
                                  "desired_antago","observed_antago",
                                  "position"]

    # the frequency subplot 
    plot_config.slots["frequency"] = ["frequency"]

    # colors. Ago: red, Antago: green
    #         observed: strong color, desired: ligher color
    #         position : some kind of pink
    #         frequency: blue
    plot_config.slots_colors = {}
    plot_config.slots_colors["desired_ago"] = (150,0,0)
    plot_config.slots_colors["observed_ago"] = (255,0,0)
    plot_config.slots_colors["desired_antago"] = (0,150,0)
    plot_config.slots_colors["observed_antago"] = (0,255,0)
    plot_config.slots_colors["position"] = (255, 100, 242)
    plot_config.slots_colors["frequency"] = (0,255,0)

    # x axis: how many data point
    plot_config.data_size = data_size
    plot_config.title = segment_id
    plot_config.windows_size = window

    # creates a o80 frontend, and uses it to get observation
    # and "feeding" the plots
    def run():

        class Holder:
            frontend = o80_pam.FrontEnd(segment_id)
            previous_iteration = None
            data = {}
            dofs = [str(dof) for dof in range(nb_dofs)]

        # position is in degrees between -180 and +180.
        # casting it to [lim_min,lim_max]
        def norm_position(position,lim_min=0,lim_max=30000):
            p = float(position) / 360.0
            diff = float(lim_max-lim_min)
            mid = diff/2.
            p = mid+p*diff
            return int(p+0.5)

        def update_data():
            observation =  Holder.frontend.latest()
            iteration = observation.get_iteration()
            if iteration == Holder.previous_iteration:
                Holder.data = {}
            Holder.previous_iteration = iteration
            observed_pressures = observation.get_observed_pressures()
            desired_pressures = observation.get_desired_pressures()
            positions = observation.get_positions()
            frequency = observation.get_frequency()
            for dof,observed,desired,position in zip(Holder.dofs,
                                                     observed_pressures,
                                                     desired_pressures,
                                                     positions):
                Holder.data[dof]={"desired_ago":desired[0],
                                  "desired_antago":desired[1],
                                  "observed_ago":observed[0],
                                  "observed_antago":observed[1]}
                if position is not None:
                    Holder.data[dof]["position"]=norm_position(position)
            Holder.data["frequency"]={"frequency":frequency}
            
        # running until keyboard interrupt
        # (warning: may not be detected) or
        # until 'q' is pressed (if the terminal console runs,
        # as curses will detect 'q', close the console, which will
        # set _Monitor.running to False, which should close the
        # loop below
        try:
            while _Monitor.running():
                update_data()
                if Holder.data:
                    dict_plot.set_data(Holder.data)
                time.sleep(0.001)
        except KeyboardInterrupt:
            pass
        except Exception as e:
            import traceback
            trace = traceback.format_exc()
            error = str(e)+"\n"+str(trace)
            _Monitor.set_error("o80 pam plotting error: "+error)
        
    try :
        dict_plot.start_plotting(plot_config,run)
    except Exception as e :
        _Monitor.set_error("o80 pam plotting error: "+str(e))

        
def _configure():
    config = BrightArgs("o80 PAM console")
    config.add_option("segment_id",
                      o80_pam.segment_ids.robot,
                      "o80 segment_id of the instance of o80 pam to display",
                      str)
    config.add_option("maximal_frequency",
                      3000,
                      "maximal frequency of the o80 backend, for scaling",
                      float,
                      Positive())
    config.add_option("nb_dofs",
                      4,
                      "number of degrees of freedom of the robot",
                      int,
                      Positive())
    config.add_option("window_width",
                      1200,
                      "plot window's width",
                      int,
                      Positive())
    config.add_option("window_height",
                      1000,
                      "plot window's height",
                      int,
                      Positive())
    config.add_option("data_size",
                      2000,
                      "number of running data points per plot",
                      int,
                      Positive())
    config.add_option("minimal_pressure",
                      5000,
                      "minimal possible muscle pressure, for scaling purposes",
                      int,
                      Positive())
    config.add_option("maximal_pressure",
                      25000,
                      "maximal possible muscle pressure, for scaling purposes",
                      int,
                      Positive())
    config.dialog()
    return config

        
