#!/usr/bin/env python3

import logging
import sys
import time
import math
import o80
import o80_pam
from lightargs import BrightArgs,Set,Range,Positive


def _configure():
    
    config = BrightArgs("o80 PAM console")
    config.add_option("segment_id",
                      o80_pam.segment_ids.robot,
                      "o80 segment_id of the instance of o80 pam to display",
                      str)
    config.add_option("min_pressure",
                      6000,
                      "minimal muscle pressure",
                      int,
                      [Range(0,25000)])
    config.add_option("max_pressure",
                      25000,
                      "maximal muscle pressure",
                      int,
                      [Range(1,30000)])
    config.add_option("ref_pressures",
                      [18000]*4,
                      "reference pressure",
                      list)
    config.add_option("q_error",
		      [0.05,0.05,0.05,0.05],
                      "acceptabled angle errors (radians)",
		      list)
    config.add_option("kp",
		       [0.005,0.005,0.005,0.005],
                      "proportional gains",
		      list)
    config.add_option("kd",
		      [0.0,0.0,0.0,0.0],
                      "derivative gains",
		      list)
    config.add_option("iteration_duration",
                      2,
                      "o80 robot iteration duration (ms)",
                      int)
    config.add_option("burst_mode",
                      False,
                      "o80 robot bursting mode",
                      bool)
    config.add_option("timeout",
                      30.0,
                      "timeout (seconds)",
                      float)
    config.add_option("mask",
                      [True,True,True,True],
                      "no pressure will be applied if false for a given joint",
                      list)

    
    change_all=False
    finished = config.dialog(change_all,sys.argv[1:])
    if not finished:
        return None
    return config


def run(config,o80_pressures):

    nb_dofs = 4
    
    pi = o80_pam.JointPositionController(o80_pressures,
                                         config.ref_pressures,
                                         config.kp,config.kd,
                                         config.iteration_duration,
                                         config.min_pressure,config.min_pressure,
                                         config.max_pressure,config.max_pressure,
                                         config.burst_mode,nb_dofs,mask=config.mask)

    #trajectory = [ [0.0]*4 ,
    #               [+math.pi/4.0]*4,
    #               [-math.pi/4.0]*4,
    #               [+math.pi/4.0]*4 ]

    trajectory = [ [-math.pi/4.0]*4 , [+math.pi/4.0]*4 , [-math.pi/4.0]*4 ]
    
    def c():
        a= [ [+math.pi/4.0,-math.pi/4.0,
              +math.pi/4.0,-math.pi/4.0],
             [-math.pi/4.0,+math.pi/4.0,
              -math.pi/4.0,+math.pi/4.0]
             [+math.pi/4.0,-math.pi/4.0,
              +math.pi/4.0,-math.pi/4.0],
             [-math.pi/4.0,+math.pi/4.0,
              -math.pi/4.0,+math.pi/4.0] ]

    def traj_point(point):
        logging.info("going to: {}".format("\t".join([str(p) for p in point])))
        finished=True
        time_start = time.time()
        for finished_,position in pi.go_to(point,
                                    config.q_error,
                                    config.timeout):
            if time.time()-time_start > 3.0:
                time_start = time.time()
                logging.info("error: {}".format("\t".join([str(abs(point_-position_))
                                                           for point_,position_ in zip(point,position)])))
            finished=finished_
        if finished:
            logging.info("reached trajectory point")
            return True
        else:
            logging.error("failed to reach desired position (timeout {} seconds)".format(config.timeout))
            return False

    for point in trajectory:
        reached = traj_point(point)
        if not reached:
            break

        
def execute():

    log_handler = logging.StreamHandler(sys.stdout)
    logging.basicConfig(
        format="[o80 pid] %(message)s",
        level=logging.DEBUG,
        handlers=[log_handler]
    )

    
    config = _configure()
    if config is None:
        return
    try:
        o80_pressures = o80_pam.o80Pressures(config.segment_id)
    except Exception as e:
        logging.error("failed to connect to robot with segment id {}: {}".format(config.segment_id,
                                                                                 e))
        return
    print()
    run(config,o80_pressures)
    print()


if __name__ == "__main__":

    execute()
