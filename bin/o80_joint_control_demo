#!/usr/bin/env python3

import logging
import sys
import time
import math
import pam_interface
import o80
import o80_pam
from lightargs import BrightArgs,Set,Range,Positive,FileExists


def _configure():
    
    config = BrightArgs("o80 PAM console")
    config.add_option("segment_id",
                      o80_pam.segment_ids.robot,
                      "o80 segment_id of the instance of o80 pam to display",
                      str)
    config.add_operation("bursting_mode",
                         "was the backend started in bursting mode ?")
    config.add_option("pam_config_file",
                      pam_interface.DefaultConfiguration.get_path(),
                      "pam configuration file",
                      str,
                      integrity_checks= [FileExists()])
    change_all=False
    finished = config.dialog(change_all,sys.argv[1:])
    if not finished:
        return None
    return config


def run(segment_id,
        bursting_mode,
        pam_config):

    config = o80_pam.JointPositionControllerConfig(pam_config)
    nb_dofs = config.nb_dofs
    
    pi = o80_pam.JointPositionController(config,
                                         bursting_mode)

    trajectory = [ [-math.pi/4.0]*4 , [+math.pi/4.0]*4 , [-math.pi/4.0]*4 ]
    
    def traj_point(point):
        logging.info("going to: {}".format("\t".join([str(p) for p in point])))
        finished=True
        time_start = time.time()
        for finished_,position in pi.go_to(point):
            if time.time()-time_start > 3.0:
                time_start = time.time()
                logging.info("error: {}".format("\t".join([str(abs(point_-position_))
                                                           for point_,position_ in zip(point,position)])))
            finished=finished_
        if finished:
            logging.info("reached trajectory point")
            return True
        else:
            logging.error("failed to reach desired position (timeout {} seconds)".format(config.timeout))
            return False

    for point in trajectory:
        reached = traj_point(point)
        if not reached:
            break

        
def execute():

    log_handler = logging.StreamHandler(sys.stdout)
    logging.basicConfig(
        format="[o80 pid] %(message)s",
        level=logging.DEBUG,
        handlers=[log_handler]
    )
    config = _configure()
    if config is None:
        return
    try:
        pam_config = pam_interface.JsonConfiguration(config.pam_config_file)
    except Exception as e:
        logging.error("failed to connect to robot with segment id {}: {}".format(config.segment_id,
                                                                                 e))
        return
    print()
    run(config.segment_id,
        config.bursting_mode,
        pam_config)
    print()


if __name__ == "__main__":

    execute()
